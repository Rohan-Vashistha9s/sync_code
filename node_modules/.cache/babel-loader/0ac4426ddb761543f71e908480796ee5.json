{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/projects/Sync_Code/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:/projects/Sync_Code/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/projects/Sync_Code/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"D:/projects/Sync_Code/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"D:/projects/Sync_Code/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"D:/projects/Sync_Code/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/projects/Sync_Code/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\n\nvar RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\nexport var Socket = /*#__PURE__*/function (_Emitter) {\n  _inherits(Socket, _Emitter);\n\n  var _super = _createSuper(Socket);\n\n  /**\r\n   * `Socket` constructor.\r\n   *\r\n   * @public\r\n   */\n  function Socket(io, nsp, opts) {\n    var _this;\n\n    _classCallCheck(this, Socket);\n\n    _this = _super.call(this);\n    _this.connected = false;\n    _this.receiveBuffer = [];\n    _this.sendBuffer = [];\n    _this.ids = 0;\n    _this.acks = {};\n    _this.flags = {};\n    _this.io = io;\n    _this.nsp = nsp;\n\n    if (opts && opts.auth) {\n      _this.auth = opts.auth;\n    }\n\n    if (_this.io._autoConnect) _this.open();\n    return _this;\n  }\n  /**\r\n   * Whether the socket is currently disconnected\r\n   */\n\n\n  _createClass(Socket, [{\n    key: \"disconnected\",\n    get: function get() {\n      return !this.connected;\n    }\n    /**\r\n     * Subscribe to open, close and packet events\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"subEvents\",\n    value: function subEvents() {\n      if (this.subs) return;\n      var io = this.io;\n      this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\r\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\r\n     */\n\n  }, {\n    key: \"active\",\n    get: function get() {\n      return !!this.subs;\n    }\n    /**\r\n     * \"Opens\" the socket.\r\n     *\r\n     * @public\r\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\r\n     * Alias for connect()\r\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      return this.connect();\n    }\n    /**\r\n     * Sends a `message` event.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\r\n     * Override `emit`.\r\n     * If the event is in `events`, it's emitted normally.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev + '\" is a reserved event name');\n      }\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      args.unshift(ev);\n      var packet = {\n        type: PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false; // event ack callback\n\n      if (\"function\" === typeof args[args.length - 1]) {\n        var id = this.ids++;\n        var ack = args.pop();\n\n        this._registerAckCallback(id, ack);\n\n        packet.id = id;\n      }\n\n      var isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n      var discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n\n      if (discardPacket) {} else if (this.connected) {\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n\n      this.flags = {};\n      return this;\n    }\n    /**\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_registerAckCallback\",\n    value: function _registerAckCallback(id, ack) {\n      var _this2 = this;\n\n      var timeout = this.flags.timeout;\n\n      if (timeout === undefined) {\n        this.acks[id] = ack;\n        return;\n      } // @ts-ignore\n\n\n      var timer = this.io.setTimeoutFn(function () {\n        delete _this2.acks[id];\n\n        for (var i = 0; i < _this2.sendBuffer.length; i++) {\n          if (_this2.sendBuffer[i].id === id) {\n            _this2.sendBuffer.splice(i, 1);\n          }\n        }\n\n        ack.call(_this2, new Error(\"operation has timed out\"));\n      }, timeout);\n\n      this.acks[id] = function () {\n        // @ts-ignore\n        _this2.io.clearTimeoutFn(timer);\n\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        ack.apply(_this2, [null].concat(args));\n      };\n    }\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\n\n  }, {\n    key: \"packet\",\n    value: function packet(_packet) {\n      _packet.nsp = this.nsp;\n\n      this.io._packet(_packet);\n    }\n    /**\r\n     * Called upon engine `open`.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      var _this3 = this;\n\n      if (typeof this.auth == \"function\") {\n        this.auth(function (data) {\n          _this3.packet({\n            type: PacketType.CONNECT,\n            data: data\n          });\n        });\n      } else {\n        this.packet({\n          type: PacketType.CONNECT,\n          data: this.auth\n        });\n      }\n    }\n    /**\r\n     * Called upon engine or manager `error`.\r\n     *\r\n     * @param err\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      if (!this.connected) {\n        this.emitReserved(\"connect_error\", err);\n      }\n    }\n    /**\r\n     * Called upon engine `close`.\r\n     *\r\n     * @param reason\r\n     * @param description\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason, description) {\n      this.connected = false;\n      delete this.id;\n      this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\r\n     * Called with socket packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onpacket\",\n    value: function onpacket(packet) {\n      var sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n\n      switch (packet.type) {\n        case PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            var id = packet.data.sid;\n            this.onconnect(id);\n          } else {\n            this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n\n          break;\n\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n\n        case PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n\n        case PacketType.CONNECT_ERROR:\n          this.destroy();\n          var err = new Error(packet.data.message); // @ts-ignore\n\n          err.data = packet.data.data;\n          this.emitReserved(\"connect_error\", err);\n          break;\n      }\n    }\n    /**\r\n     * Called upon a server event.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onevent\",\n    value: function onevent(packet) {\n      var args = packet.data || [];\n\n      if (null != packet.id) {\n        args.push(this.ack(packet.id));\n      }\n\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n\n        var _iterator = _createForOfIteratorHelper(listeners),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).apply(this, args);\n    }\n    /**\r\n     * Produces an ack callback to emit with an event.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"ack\",\n    value: function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n\n        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n\n        self.packet({\n          type: PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\r\n     * Called upon a server acknowlegement.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onack\",\n    value: function onack(packet) {\n      var ack = this.acks[packet.id];\n\n      if (\"function\" === typeof ack) {\n        ack.apply(this, packet.data);\n        delete this.acks[packet.id];\n      } else {}\n    }\n    /**\r\n     * Called upon server connect.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onconnect\",\n    value: function onconnect(id) {\n      this.id = id;\n      this.connected = true;\n      this.emitBuffered();\n      this.emitReserved(\"connect\");\n    }\n    /**\r\n     * Emit buffered events (received and emitted).\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"emitBuffered\",\n    value: function emitBuffered() {\n      var _this4 = this;\n\n      this.receiveBuffer.forEach(function (args) {\n        return _this4.emitEvent(args);\n      });\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(function (packet) {\n        _this4.notifyOutgoingListeners(packet);\n\n        _this4.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\r\n     * Called upon server disconnect.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"ondisconnect\",\n    value: function ondisconnect() {\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\r\n     * Called upon forced client/server side disconnections,\r\n     * this method ensures the manager stops tracking us and\r\n     * that reconnections don't get triggered for this.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(function (subDestroy) {\n          return subDestroy();\n        });\n        this.subs = undefined;\n      }\n\n      this.io[\"_destroy\"](this);\n    }\n    /**\r\n     * Disconnects the socket manually.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.connected) {\n        this.packet({\n          type: PacketType.DISCONNECT\n        });\n      } // remove socket from pool\n\n\n      this.destroy();\n\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n\n      return this;\n    }\n    /**\r\n     * Alias for disconnect()\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.disconnect();\n    }\n    /**\r\n     * Sets the compress flag.\r\n     *\r\n     * @param compress - if `true`, compresses the sending data\r\n     * @return self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\r\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n     * ready to send messages.\r\n     *\r\n     * @returns self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\r\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\r\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\r\n     *\r\n     * ```\r\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\r\n     *   if (err) {\r\n     *     // the server did not acknowledge the event in the given delay\r\n     *   }\r\n     * });\r\n     * ```\r\n     *\r\n     * @returns self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"timeout\",\n    value: function timeout(_timeout) {\n      this.flags.timeout = _timeout;\n      return this;\n    }\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\n\n  }, {\n    key: \"onAny\",\n    value: function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.push(listener);\n\n      return this;\n    }\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\n\n  }, {\n    key: \"prependAny\",\n    value: function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.unshift(listener);\n\n      return this;\n    }\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\n\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n\n      return this;\n    }\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     *\r\n     * @public\r\n     */\n\n  }, {\n    key: \"listenersAny\",\n    value: function listenersAny() {\n      return this._anyListeners || [];\n    }\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @param listener\r\n     *\r\n     * <pre><code>\r\n     *\r\n     * socket.onAnyOutgoing((event, ...args) => {\r\n     *   console.log(event);\r\n     * });\r\n     *\r\n     * </pre></code>\r\n     *\r\n     * @public\r\n     */\n\n  }, {\n    key: \"onAnyOutgoing\",\n    value: function onAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n      this._anyOutgoingListeners.push(listener);\n\n      return this;\n    }\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @param listener\r\n     *\r\n     * <pre><code>\r\n     *\r\n     * socket.prependAnyOutgoing((event, ...args) => {\r\n     *   console.log(event);\r\n     * });\r\n     *\r\n     * </pre></code>\r\n     *\r\n     * @public\r\n     */\n\n  }, {\n    key: \"prependAnyOutgoing\",\n    value: function prependAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n      this._anyOutgoingListeners.unshift(listener);\n\n      return this;\n    }\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @param listener\r\n     *\r\n     * <pre><code>\r\n     *\r\n     * const handler = (event, ...args) => {\r\n     *   console.log(event);\r\n     * }\r\n     *\r\n     * socket.onAnyOutgoing(handler);\r\n     *\r\n     * // then later\r\n     * socket.offAnyOutgoing(handler);\r\n     *\r\n     * </pre></code>\r\n     *\r\n     * @public\r\n     */\n\n  }, {\n    key: \"offAnyOutgoing\",\n    value: function offAnyOutgoing(listener) {\n      if (!this._anyOutgoingListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyOutgoingListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyOutgoingListeners = [];\n      }\n\n      return this;\n    }\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     *\r\n     * @public\r\n     */\n\n  }, {\n    key: \"listenersAnyOutgoing\",\n    value: function listenersAnyOutgoing() {\n      return this._anyOutgoingListeners || [];\n    }\n    /**\r\n     * Notify the listeners for each packet sent\r\n     *\r\n     * @param packet\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"notifyOutgoingListeners\",\n    value: function notifyOutgoingListeners(packet) {\n      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n        var listeners = this._anyOutgoingListeners.slice();\n\n        var _iterator2 = _createForOfIteratorHelper(listeners),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var listener = _step2.value;\n            listener.apply(this, packet.data);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  }]);\n\n  return Socket;\n}(Emitter);","map":{"version":3,"names":["PacketType","on","Emitter","RESERVED_EVENTS","Object","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Socket","io","nsp","opts","connected","receiveBuffer","sendBuffer","ids","acks","flags","auth","_autoConnect","open","subs","onopen","bind","onpacket","onerror","onclose","subEvents","_readyState","args","unshift","emit","apply","ev","hasOwnProperty","Error","packet","type","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","discardPacket","volatile","notifyOutgoingListeners","push","timeout","undefined","timer","setTimeoutFn","i","splice","call","clearTimeoutFn","_packet","CONNECT","err","emitReserved","reason","description","sameNamespace","sid","onconnect","BINARY_EVENT","onevent","ACK","BINARY_ACK","onack","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","subDestroy","_anyOutgoingListeners"],"sources":["D:/projects/Sync_Code/node_modules/socket.io-client/build/esm/socket.js"],"sourcesContent":["import { PacketType } from \"socket.io-parser\";\r\nimport { on } from \"./on.js\";\r\nimport { Emitter, } from \"@socket.io/component-emitter\";\r\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\r\nconst RESERVED_EVENTS = Object.freeze({\r\n    connect: 1,\r\n    connect_error: 1,\r\n    disconnect: 1,\r\n    disconnecting: 1,\r\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\r\n    newListener: 1,\r\n    removeListener: 1,\r\n});\r\nexport class Socket extends Emitter {\r\n    /**\r\n     * `Socket` constructor.\r\n     *\r\n     * @public\r\n     */\r\n    constructor(io, nsp, opts) {\r\n        super();\r\n        this.connected = false;\r\n        this.receiveBuffer = [];\r\n        this.sendBuffer = [];\r\n        this.ids = 0;\r\n        this.acks = {};\r\n        this.flags = {};\r\n        this.io = io;\r\n        this.nsp = nsp;\r\n        if (opts && opts.auth) {\r\n            this.auth = opts.auth;\r\n        }\r\n        if (this.io._autoConnect)\r\n            this.open();\r\n    }\r\n    /**\r\n     * Whether the socket is currently disconnected\r\n     */\r\n    get disconnected() {\r\n        return !this.connected;\r\n    }\r\n    /**\r\n     * Subscribe to open, close and packet events\r\n     *\r\n     * @private\r\n     */\r\n    subEvents() {\r\n        if (this.subs)\r\n            return;\r\n        const io = this.io;\r\n        this.subs = [\r\n            on(io, \"open\", this.onopen.bind(this)),\r\n            on(io, \"packet\", this.onpacket.bind(this)),\r\n            on(io, \"error\", this.onerror.bind(this)),\r\n            on(io, \"close\", this.onclose.bind(this)),\r\n        ];\r\n    }\r\n    /**\r\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\r\n     */\r\n    get active() {\r\n        return !!this.subs;\r\n    }\r\n    /**\r\n     * \"Opens\" the socket.\r\n     *\r\n     * @public\r\n     */\r\n    connect() {\r\n        if (this.connected)\r\n            return this;\r\n        this.subEvents();\r\n        if (!this.io[\"_reconnecting\"])\r\n            this.io.open(); // ensure open\r\n        if (\"open\" === this.io._readyState)\r\n            this.onopen();\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for connect()\r\n     */\r\n    open() {\r\n        return this.connect();\r\n    }\r\n    /**\r\n     * Sends a `message` event.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    send(...args) {\r\n        args.unshift(\"message\");\r\n        this.emit.apply(this, args);\r\n        return this;\r\n    }\r\n    /**\r\n     * Override `emit`.\r\n     * If the event is in `events`, it's emitted normally.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    emit(ev, ...args) {\r\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\r\n            throw new Error('\"' + ev + '\" is a reserved event name');\r\n        }\r\n        args.unshift(ev);\r\n        const packet = {\r\n            type: PacketType.EVENT,\r\n            data: args,\r\n        };\r\n        packet.options = {};\r\n        packet.options.compress = this.flags.compress !== false;\r\n        // event ack callback\r\n        if (\"function\" === typeof args[args.length - 1]) {\r\n            const id = this.ids++;\r\n            const ack = args.pop();\r\n            this._registerAckCallback(id, ack);\r\n            packet.id = id;\r\n        }\r\n        const isTransportWritable = this.io.engine &&\r\n            this.io.engine.transport &&\r\n            this.io.engine.transport.writable;\r\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\r\n        if (discardPacket) {\r\n        }\r\n        else if (this.connected) {\r\n            this.notifyOutgoingListeners(packet);\r\n            this.packet(packet);\r\n        }\r\n        else {\r\n            this.sendBuffer.push(packet);\r\n        }\r\n        this.flags = {};\r\n        return this;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _registerAckCallback(id, ack) {\r\n        const timeout = this.flags.timeout;\r\n        if (timeout === undefined) {\r\n            this.acks[id] = ack;\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        const timer = this.io.setTimeoutFn(() => {\r\n            delete this.acks[id];\r\n            for (let i = 0; i < this.sendBuffer.length; i++) {\r\n                if (this.sendBuffer[i].id === id) {\r\n                    this.sendBuffer.splice(i, 1);\r\n                }\r\n            }\r\n            ack.call(this, new Error(\"operation has timed out\"));\r\n        }, timeout);\r\n        this.acks[id] = (...args) => {\r\n            // @ts-ignore\r\n            this.io.clearTimeoutFn(timer);\r\n            ack.apply(this, [null, ...args]);\r\n        };\r\n    }\r\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    packet(packet) {\r\n        packet.nsp = this.nsp;\r\n        this.io._packet(packet);\r\n    }\r\n    /**\r\n     * Called upon engine `open`.\r\n     *\r\n     * @private\r\n     */\r\n    onopen() {\r\n        if (typeof this.auth == \"function\") {\r\n            this.auth((data) => {\r\n                this.packet({ type: PacketType.CONNECT, data });\r\n            });\r\n        }\r\n        else {\r\n            this.packet({ type: PacketType.CONNECT, data: this.auth });\r\n        }\r\n    }\r\n    /**\r\n     * Called upon engine or manager `error`.\r\n     *\r\n     * @param err\r\n     * @private\r\n     */\r\n    onerror(err) {\r\n        if (!this.connected) {\r\n            this.emitReserved(\"connect_error\", err);\r\n        }\r\n    }\r\n    /**\r\n     * Called upon engine `close`.\r\n     *\r\n     * @param reason\r\n     * @param description\r\n     * @private\r\n     */\r\n    onclose(reason, description) {\r\n        this.connected = false;\r\n        delete this.id;\r\n        this.emitReserved(\"disconnect\", reason, description);\r\n    }\r\n    /**\r\n     * Called with socket packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onpacket(packet) {\r\n        const sameNamespace = packet.nsp === this.nsp;\r\n        if (!sameNamespace)\r\n            return;\r\n        switch (packet.type) {\r\n            case PacketType.CONNECT:\r\n                if (packet.data && packet.data.sid) {\r\n                    const id = packet.data.sid;\r\n                    this.onconnect(id);\r\n                }\r\n                else {\r\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\r\n                }\r\n                break;\r\n            case PacketType.EVENT:\r\n            case PacketType.BINARY_EVENT:\r\n                this.onevent(packet);\r\n                break;\r\n            case PacketType.ACK:\r\n            case PacketType.BINARY_ACK:\r\n                this.onack(packet);\r\n                break;\r\n            case PacketType.DISCONNECT:\r\n                this.ondisconnect();\r\n                break;\r\n            case PacketType.CONNECT_ERROR:\r\n                this.destroy();\r\n                const err = new Error(packet.data.message);\r\n                // @ts-ignore\r\n                err.data = packet.data.data;\r\n                this.emitReserved(\"connect_error\", err);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Called upon a server event.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onevent(packet) {\r\n        const args = packet.data || [];\r\n        if (null != packet.id) {\r\n            args.push(this.ack(packet.id));\r\n        }\r\n        if (this.connected) {\r\n            this.emitEvent(args);\r\n        }\r\n        else {\r\n            this.receiveBuffer.push(Object.freeze(args));\r\n        }\r\n    }\r\n    emitEvent(args) {\r\n        if (this._anyListeners && this._anyListeners.length) {\r\n            const listeners = this._anyListeners.slice();\r\n            for (const listener of listeners) {\r\n                listener.apply(this, args);\r\n            }\r\n        }\r\n        super.emit.apply(this, args);\r\n    }\r\n    /**\r\n     * Produces an ack callback to emit with an event.\r\n     *\r\n     * @private\r\n     */\r\n    ack(id) {\r\n        const self = this;\r\n        let sent = false;\r\n        return function (...args) {\r\n            // prevent double callbacks\r\n            if (sent)\r\n                return;\r\n            sent = true;\r\n            self.packet({\r\n                type: PacketType.ACK,\r\n                id: id,\r\n                data: args,\r\n            });\r\n        };\r\n    }\r\n    /**\r\n     * Called upon a server acknowlegement.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onack(packet) {\r\n        const ack = this.acks[packet.id];\r\n        if (\"function\" === typeof ack) {\r\n            ack.apply(this, packet.data);\r\n            delete this.acks[packet.id];\r\n        }\r\n        else {\r\n        }\r\n    }\r\n    /**\r\n     * Called upon server connect.\r\n     *\r\n     * @private\r\n     */\r\n    onconnect(id) {\r\n        this.id = id;\r\n        this.connected = true;\r\n        this.emitBuffered();\r\n        this.emitReserved(\"connect\");\r\n    }\r\n    /**\r\n     * Emit buffered events (received and emitted).\r\n     *\r\n     * @private\r\n     */\r\n    emitBuffered() {\r\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\r\n        this.receiveBuffer = [];\r\n        this.sendBuffer.forEach((packet) => {\r\n            this.notifyOutgoingListeners(packet);\r\n            this.packet(packet);\r\n        });\r\n        this.sendBuffer = [];\r\n    }\r\n    /**\r\n     * Called upon server disconnect.\r\n     *\r\n     * @private\r\n     */\r\n    ondisconnect() {\r\n        this.destroy();\r\n        this.onclose(\"io server disconnect\");\r\n    }\r\n    /**\r\n     * Called upon forced client/server side disconnections,\r\n     * this method ensures the manager stops tracking us and\r\n     * that reconnections don't get triggered for this.\r\n     *\r\n     * @private\r\n     */\r\n    destroy() {\r\n        if (this.subs) {\r\n            // clean subscriptions to avoid reconnections\r\n            this.subs.forEach((subDestroy) => subDestroy());\r\n            this.subs = undefined;\r\n        }\r\n        this.io[\"_destroy\"](this);\r\n    }\r\n    /**\r\n     * Disconnects the socket manually.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    disconnect() {\r\n        if (this.connected) {\r\n            this.packet({ type: PacketType.DISCONNECT });\r\n        }\r\n        // remove socket from pool\r\n        this.destroy();\r\n        if (this.connected) {\r\n            // fire events\r\n            this.onclose(\"io client disconnect\");\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for disconnect()\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    close() {\r\n        return this.disconnect();\r\n    }\r\n    /**\r\n     * Sets the compress flag.\r\n     *\r\n     * @param compress - if `true`, compresses the sending data\r\n     * @return self\r\n     * @public\r\n     */\r\n    compress(compress) {\r\n        this.flags.compress = compress;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n     * ready to send messages.\r\n     *\r\n     * @returns self\r\n     * @public\r\n     */\r\n    get volatile() {\r\n        this.flags.volatile = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\r\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\r\n     *\r\n     * ```\r\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\r\n     *   if (err) {\r\n     *     // the server did not acknowledge the event in the given delay\r\n     *   }\r\n     * });\r\n     * ```\r\n     *\r\n     * @returns self\r\n     * @public\r\n     */\r\n    timeout(timeout) {\r\n        this.flags.timeout = timeout;\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    onAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.push(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    prependAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.unshift(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    offAny(listener) {\r\n        if (!this._anyListeners) {\r\n            return this;\r\n        }\r\n        if (listener) {\r\n            const listeners = this._anyListeners;\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                if (listener === listeners[i]) {\r\n                    listeners.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._anyListeners = [];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     *\r\n     * @public\r\n     */\r\n    listenersAny() {\r\n        return this._anyListeners || [];\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @param listener\r\n     *\r\n     * <pre><code>\r\n     *\r\n     * socket.onAnyOutgoing((event, ...args) => {\r\n     *   console.log(event);\r\n     * });\r\n     *\r\n     * </pre></code>\r\n     *\r\n     * @public\r\n     */\r\n    onAnyOutgoing(listener) {\r\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\r\n        this._anyOutgoingListeners.push(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @param listener\r\n     *\r\n     * <pre><code>\r\n     *\r\n     * socket.prependAnyOutgoing((event, ...args) => {\r\n     *   console.log(event);\r\n     * });\r\n     *\r\n     * </pre></code>\r\n     *\r\n     * @public\r\n     */\r\n    prependAnyOutgoing(listener) {\r\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\r\n        this._anyOutgoingListeners.unshift(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @param listener\r\n     *\r\n     * <pre><code>\r\n     *\r\n     * const handler = (event, ...args) => {\r\n     *   console.log(event);\r\n     * }\r\n     *\r\n     * socket.onAnyOutgoing(handler);\r\n     *\r\n     * // then later\r\n     * socket.offAnyOutgoing(handler);\r\n     *\r\n     * </pre></code>\r\n     *\r\n     * @public\r\n     */\r\n    offAnyOutgoing(listener) {\r\n        if (!this._anyOutgoingListeners) {\r\n            return this;\r\n        }\r\n        if (listener) {\r\n            const listeners = this._anyOutgoingListeners;\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                if (listener === listeners[i]) {\r\n                    listeners.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._anyOutgoingListeners = [];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     *\r\n     * @public\r\n     */\r\n    listenersAnyOutgoing() {\r\n        return this._anyOutgoingListeners || [];\r\n    }\r\n    /**\r\n     * Notify the listeners for each packet sent\r\n     *\r\n     * @param packet\r\n     *\r\n     * @private\r\n     */\r\n    notifyOutgoingListeners(packet) {\r\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\r\n            const listeners = this._anyOutgoingListeners.slice();\r\n            for (const listener of listeners) {\r\n                listener.apply(this, packet.data);\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"mappings":";;;;;;;AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,SAASC,EAAT,QAAmB,SAAnB;AACA,SAASC,OAAT,QAAyB,8BAAzB;AACA;AACA;AACA;AACA;;AACA,IAAMC,eAAe,GAAGC,MAAM,CAACC,MAAP,CAAc;EAClCC,OAAO,EAAE,CADyB;EAElCC,aAAa,EAAE,CAFmB;EAGlCC,UAAU,EAAE,CAHsB;EAIlCC,aAAa,EAAE,CAJmB;EAKlC;EACAC,WAAW,EAAE,CANqB;EAOlCC,cAAc,EAAE;AAPkB,CAAd,CAAxB;AASA,WAAaC,MAAb;EAAA;;EAAA;;EACI;AACJ;AACA;AACA;AACA;EACI,gBAAYC,EAAZ,EAAgBC,GAAhB,EAAqBC,IAArB,EAA2B;IAAA;;IAAA;;IACvB;IACA,MAAKC,SAAL,GAAiB,KAAjB;IACA,MAAKC,aAAL,GAAqB,EAArB;IACA,MAAKC,UAAL,GAAkB,EAAlB;IACA,MAAKC,GAAL,GAAW,CAAX;IACA,MAAKC,IAAL,GAAY,EAAZ;IACA,MAAKC,KAAL,GAAa,EAAb;IACA,MAAKR,EAAL,GAAUA,EAAV;IACA,MAAKC,GAAL,GAAWA,GAAX;;IACA,IAAIC,IAAI,IAAIA,IAAI,CAACO,IAAjB,EAAuB;MACnB,MAAKA,IAAL,GAAYP,IAAI,CAACO,IAAjB;IACH;;IACD,IAAI,MAAKT,EAAL,CAAQU,YAAZ,EACI,MAAKC,IAAL;IAdmB;EAe1B;EACD;AACJ;AACA;;;EAxBA;IAAA;IAAA,KAyBI,eAAmB;MACf,OAAO,CAAC,KAAKR,SAAb;IACH;IACD;AACJ;AACA;AACA;AACA;;EAhCA;IAAA;IAAA,OAiCI,qBAAY;MACR,IAAI,KAAKS,IAAT,EACI;MACJ,IAAMZ,EAAE,GAAG,KAAKA,EAAhB;MACA,KAAKY,IAAL,GAAY,CACRxB,EAAE,CAACY,EAAD,EAAK,MAAL,EAAa,KAAKa,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAb,CADM,EAER1B,EAAE,CAACY,EAAD,EAAK,QAAL,EAAe,KAAKe,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAf,CAFM,EAGR1B,EAAE,CAACY,EAAD,EAAK,OAAL,EAAc,KAAKgB,OAAL,CAAaF,IAAb,CAAkB,IAAlB,CAAd,CAHM,EAIR1B,EAAE,CAACY,EAAD,EAAK,OAAL,EAAc,KAAKiB,OAAL,CAAaH,IAAb,CAAkB,IAAlB,CAAd,CAJM,CAAZ;IAMH;IACD;AACJ;AACA;;EA9CA;IAAA;IAAA,KA+CI,eAAa;MACT,OAAO,CAAC,CAAC,KAAKF,IAAd;IACH;IACD;AACJ;AACA;AACA;AACA;;EAtDA;IAAA;IAAA,OAuDI,mBAAU;MACN,IAAI,KAAKT,SAAT,EACI,OAAO,IAAP;MACJ,KAAKe,SAAL;MACA,IAAI,CAAC,KAAKlB,EAAL,CAAQ,eAAR,CAAL,EACI,KAAKA,EAAL,CAAQW,IAAR,GALE,CAKc;;MACpB,IAAI,WAAW,KAAKX,EAAL,CAAQmB,WAAvB,EACI,KAAKN,MAAL;MACJ,OAAO,IAAP;IACH;IACD;AACJ;AACA;;EAnEA;IAAA;IAAA,OAoEI,gBAAO;MACH,OAAO,KAAKpB,OAAL,EAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;EA5EA;IAAA;IAAA,OA6EI,gBAAc;MAAA,kCAAN2B,IAAM;QAANA,IAAM;MAAA;;MACVA,IAAI,CAACC,OAAL,CAAa,SAAb;MACA,KAAKC,IAAL,CAAUC,KAAV,CAAgB,IAAhB,EAAsBH,IAAtB;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAxFA;IAAA;IAAA,OAyFI,cAAKI,EAAL,EAAkB;MACd,IAAIlC,eAAe,CAACmC,cAAhB,CAA+BD,EAA/B,CAAJ,EAAwC;QACpC,MAAM,IAAIE,KAAJ,CAAU,MAAMF,EAAN,GAAW,4BAArB,CAAN;MACH;;MAHa,mCAANJ,IAAM;QAANA,IAAM;MAAA;;MAIdA,IAAI,CAACC,OAAL,CAAaG,EAAb;MACA,IAAMG,MAAM,GAAG;QACXC,IAAI,EAAEzC,UAAU,CAAC0C,KADN;QAEXC,IAAI,EAAEV;MAFK,CAAf;MAIAO,MAAM,CAACI,OAAP,GAAiB,EAAjB;MACAJ,MAAM,CAACI,OAAP,CAAeC,QAAf,GAA0B,KAAKxB,KAAL,CAAWwB,QAAX,KAAwB,KAAlD,CAVc,CAWd;;MACA,IAAI,eAAe,OAAOZ,IAAI,CAACA,IAAI,CAACa,MAAL,GAAc,CAAf,CAA9B,EAAiD;QAC7C,IAAMC,EAAE,GAAG,KAAK5B,GAAL,EAAX;QACA,IAAM6B,GAAG,GAAGf,IAAI,CAACgB,GAAL,EAAZ;;QACA,KAAKC,oBAAL,CAA0BH,EAA1B,EAA8BC,GAA9B;;QACAR,MAAM,CAACO,EAAP,GAAYA,EAAZ;MACH;;MACD,IAAMI,mBAAmB,GAAG,KAAKtC,EAAL,CAAQuC,MAAR,IACxB,KAAKvC,EAAL,CAAQuC,MAAR,CAAeC,SADS,IAExB,KAAKxC,EAAL,CAAQuC,MAAR,CAAeC,SAAf,CAAyBC,QAF7B;MAGA,IAAMC,aAAa,GAAG,KAAKlC,KAAL,CAAWmC,QAAX,KAAwB,CAACL,mBAAD,IAAwB,CAAC,KAAKnC,SAAtD,CAAtB;;MACA,IAAIuC,aAAJ,EAAmB,CAClB,CADD,MAEK,IAAI,KAAKvC,SAAT,EAAoB;QACrB,KAAKyC,uBAAL,CAA6BjB,MAA7B;QACA,KAAKA,MAAL,CAAYA,MAAZ;MACH,CAHI,MAIA;QACD,KAAKtB,UAAL,CAAgBwC,IAAhB,CAAqBlB,MAArB;MACH;;MACD,KAAKnB,KAAL,GAAa,EAAb;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;;EA7HA;IAAA;IAAA,OA8HI,8BAAqB0B,EAArB,EAAyBC,GAAzB,EAA8B;MAAA;;MAC1B,IAAMW,OAAO,GAAG,KAAKtC,KAAL,CAAWsC,OAA3B;;MACA,IAAIA,OAAO,KAAKC,SAAhB,EAA2B;QACvB,KAAKxC,IAAL,CAAU2B,EAAV,IAAgBC,GAAhB;QACA;MACH,CALyB,CAM1B;;;MACA,IAAMa,KAAK,GAAG,KAAKhD,EAAL,CAAQiD,YAAR,CAAqB,YAAM;QACrC,OAAO,MAAI,CAAC1C,IAAL,CAAU2B,EAAV,CAAP;;QACA,KAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,MAAI,CAAC7C,UAAL,CAAgB4B,MAApC,EAA4CiB,CAAC,EAA7C,EAAiD;UAC7C,IAAI,MAAI,CAAC7C,UAAL,CAAgB6C,CAAhB,EAAmBhB,EAAnB,KAA0BA,EAA9B,EAAkC;YAC9B,MAAI,CAAC7B,UAAL,CAAgB8C,MAAhB,CAAuBD,CAAvB,EAA0B,CAA1B;UACH;QACJ;;QACDf,GAAG,CAACiB,IAAJ,CAAS,MAAT,EAAe,IAAI1B,KAAJ,CAAU,yBAAV,CAAf;MACH,CARa,EAQXoB,OARW,CAAd;;MASA,KAAKvC,IAAL,CAAU2B,EAAV,IAAgB,YAAa;QACzB;QACA,MAAI,CAAClC,EAAL,CAAQqD,cAAR,CAAuBL,KAAvB;;QAFyB,mCAAT5B,IAAS;UAATA,IAAS;QAAA;;QAGzBe,GAAG,CAACZ,KAAJ,CAAU,MAAV,GAAiB,IAAjB,SAA0BH,IAA1B;MACH,CAJD;IAKH;IACD;AACJ;AACA;AACA;AACA;AACA;;EAzJA;IAAA;IAAA,OA0JI,gBAAOO,OAAP,EAAe;MACXA,OAAM,CAAC1B,GAAP,GAAa,KAAKA,GAAlB;;MACA,KAAKD,EAAL,CAAQsD,OAAR,CAAgB3B,OAAhB;IACH;IACD;AACJ;AACA;AACA;AACA;;EAlKA;IAAA;IAAA,OAmKI,kBAAS;MAAA;;MACL,IAAI,OAAO,KAAKlB,IAAZ,IAAoB,UAAxB,EAAoC;QAChC,KAAKA,IAAL,CAAU,UAACqB,IAAD,EAAU;UAChB,MAAI,CAACH,MAAL,CAAY;YAAEC,IAAI,EAAEzC,UAAU,CAACoE,OAAnB;YAA4BzB,IAAI,EAAJA;UAA5B,CAAZ;QACH,CAFD;MAGH,CAJD,MAKK;QACD,KAAKH,MAAL,CAAY;UAAEC,IAAI,EAAEzC,UAAU,CAACoE,OAAnB;UAA4BzB,IAAI,EAAE,KAAKrB;QAAvC,CAAZ;MACH;IACJ;IACD;AACJ;AACA;AACA;AACA;AACA;;EAlLA;IAAA;IAAA,OAmLI,iBAAQ+C,GAAR,EAAa;MACT,IAAI,CAAC,KAAKrD,SAAV,EAAqB;QACjB,KAAKsD,YAAL,CAAkB,eAAlB,EAAmCD,GAAnC;MACH;IACJ;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EA9LA;IAAA;IAAA,OA+LI,iBAAQE,MAAR,EAAgBC,WAAhB,EAA6B;MACzB,KAAKxD,SAAL,GAAiB,KAAjB;MACA,OAAO,KAAK+B,EAAZ;MACA,KAAKuB,YAAL,CAAkB,YAAlB,EAAgCC,MAAhC,EAAwCC,WAAxC;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;EAzMA;IAAA;IAAA,OA0MI,kBAAShC,MAAT,EAAiB;MACb,IAAMiC,aAAa,GAAGjC,MAAM,CAAC1B,GAAP,KAAe,KAAKA,GAA1C;MACA,IAAI,CAAC2D,aAAL,EACI;;MACJ,QAAQjC,MAAM,CAACC,IAAf;QACI,KAAKzC,UAAU,CAACoE,OAAhB;UACI,IAAI5B,MAAM,CAACG,IAAP,IAAeH,MAAM,CAACG,IAAP,CAAY+B,GAA/B,EAAoC;YAChC,IAAM3B,EAAE,GAAGP,MAAM,CAACG,IAAP,CAAY+B,GAAvB;YACA,KAAKC,SAAL,CAAe5B,EAAf;UACH,CAHD,MAIK;YACD,KAAKuB,YAAL,CAAkB,eAAlB,EAAmC,IAAI/B,KAAJ,CAAU,2LAAV,CAAnC;UACH;;UACD;;QACJ,KAAKvC,UAAU,CAAC0C,KAAhB;QACA,KAAK1C,UAAU,CAAC4E,YAAhB;UACI,KAAKC,OAAL,CAAarC,MAAb;UACA;;QACJ,KAAKxC,UAAU,CAAC8E,GAAhB;QACA,KAAK9E,UAAU,CAAC+E,UAAhB;UACI,KAAKC,KAAL,CAAWxC,MAAX;UACA;;QACJ,KAAKxC,UAAU,CAACiF,UAAhB;UACI,KAAKC,YAAL;UACA;;QACJ,KAAKlF,UAAU,CAACmF,aAAhB;UACI,KAAKC,OAAL;UACA,IAAMf,GAAG,GAAG,IAAI9B,KAAJ,CAAUC,MAAM,CAACG,IAAP,CAAY0C,OAAtB,CAAZ,CAFJ,CAGI;;UACAhB,GAAG,CAAC1B,IAAJ,GAAWH,MAAM,CAACG,IAAP,CAAYA,IAAvB;UACA,KAAK2B,YAAL,CAAkB,eAAlB,EAAmCD,GAAnC;UACA;MA3BR;IA6BH;IACD;AACJ;AACA;AACA;AACA;AACA;;EAjPA;IAAA;IAAA,OAkPI,iBAAQ7B,MAAR,EAAgB;MACZ,IAAMP,IAAI,GAAGO,MAAM,CAACG,IAAP,IAAe,EAA5B;;MACA,IAAI,QAAQH,MAAM,CAACO,EAAnB,EAAuB;QACnBd,IAAI,CAACyB,IAAL,CAAU,KAAKV,GAAL,CAASR,MAAM,CAACO,EAAhB,CAAV;MACH;;MACD,IAAI,KAAK/B,SAAT,EAAoB;QAChB,KAAKsE,SAAL,CAAerD,IAAf;MACH,CAFD,MAGK;QACD,KAAKhB,aAAL,CAAmByC,IAAnB,CAAwBtD,MAAM,CAACC,MAAP,CAAc4B,IAAd,CAAxB;MACH;IACJ;EA7PL;IAAA;IAAA,OA8PI,mBAAUA,IAAV,EAAgB;MACZ,IAAI,KAAKsD,aAAL,IAAsB,KAAKA,aAAL,CAAmBzC,MAA7C,EAAqD;QACjD,IAAM0C,SAAS,GAAG,KAAKD,aAAL,CAAmBE,KAAnB,EAAlB;;QADiD,2CAE1BD,SAF0B;QAAA;;QAAA;UAEjD,oDAAkC;YAAA,IAAvBE,QAAuB;YAC9BA,QAAQ,CAACtD,KAAT,CAAe,IAAf,EAAqBH,IAArB;UACH;QAJgD;UAAA;QAAA;UAAA;QAAA;MAKpD;;MACD,sDAAWG,KAAX,CAAiB,IAAjB,EAAuBH,IAAvB;IACH;IACD;AACJ;AACA;AACA;AACA;;EA3QA;IAAA;IAAA,OA4QI,aAAIc,EAAJ,EAAQ;MACJ,IAAM4C,IAAI,GAAG,IAAb;MACA,IAAIC,IAAI,GAAG,KAAX;MACA,OAAO,YAAmB;QACtB;QACA,IAAIA,IAAJ,EACI;QACJA,IAAI,GAAG,IAAP;;QAJsB,mCAAN3D,IAAM;UAANA,IAAM;QAAA;;QAKtB0D,IAAI,CAACnD,MAAL,CAAY;UACRC,IAAI,EAAEzC,UAAU,CAAC8E,GADT;UAER/B,EAAE,EAAEA,EAFI;UAGRJ,IAAI,EAAEV;QAHE,CAAZ;MAKH,CAVD;IAWH;IACD;AACJ;AACA;AACA;AACA;AACA;;EAhSA;IAAA;IAAA,OAiSI,eAAMO,MAAN,EAAc;MACV,IAAMQ,GAAG,GAAG,KAAK5B,IAAL,CAAUoB,MAAM,CAACO,EAAjB,CAAZ;;MACA,IAAI,eAAe,OAAOC,GAA1B,EAA+B;QAC3BA,GAAG,CAACZ,KAAJ,CAAU,IAAV,EAAgBI,MAAM,CAACG,IAAvB;QACA,OAAO,KAAKvB,IAAL,CAAUoB,MAAM,CAACO,EAAjB,CAAP;MACH,CAHD,MAIK,CACJ;IACJ;IACD;AACJ;AACA;AACA;AACA;;EA9SA;IAAA;IAAA,OA+SI,mBAAUA,EAAV,EAAc;MACV,KAAKA,EAAL,GAAUA,EAAV;MACA,KAAK/B,SAAL,GAAiB,IAAjB;MACA,KAAK6E,YAAL;MACA,KAAKvB,YAAL,CAAkB,SAAlB;IACH;IACD;AACJ;AACA;AACA;AACA;;EAzTA;IAAA;IAAA,OA0TI,wBAAe;MAAA;;MACX,KAAKrD,aAAL,CAAmB6E,OAAnB,CAA2B,UAAC7D,IAAD;QAAA,OAAU,MAAI,CAACqD,SAAL,CAAerD,IAAf,CAAV;MAAA,CAA3B;MACA,KAAKhB,aAAL,GAAqB,EAArB;MACA,KAAKC,UAAL,CAAgB4E,OAAhB,CAAwB,UAACtD,MAAD,EAAY;QAChC,MAAI,CAACiB,uBAAL,CAA6BjB,MAA7B;;QACA,MAAI,CAACA,MAAL,CAAYA,MAAZ;MACH,CAHD;MAIA,KAAKtB,UAAL,GAAkB,EAAlB;IACH;IACD;AACJ;AACA;AACA;AACA;;EAvUA;IAAA;IAAA,OAwUI,wBAAe;MACX,KAAKkE,OAAL;MACA,KAAKtD,OAAL,CAAa,sBAAb;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAlVA;IAAA;IAAA,OAmVI,mBAAU;MACN,IAAI,KAAKL,IAAT,EAAe;QACX;QACA,KAAKA,IAAL,CAAUqE,OAAV,CAAkB,UAACC,UAAD;UAAA,OAAgBA,UAAU,EAA1B;QAAA,CAAlB;QACA,KAAKtE,IAAL,GAAYmC,SAAZ;MACH;;MACD,KAAK/C,EAAL,CAAQ,UAAR,EAAoB,IAApB;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;EAhWA;IAAA;IAAA,OAiWI,sBAAa;MACT,IAAI,KAAKG,SAAT,EAAoB;QAChB,KAAKwB,MAAL,CAAY;UAAEC,IAAI,EAAEzC,UAAU,CAACiF;QAAnB,CAAZ;MACH,CAHQ,CAIT;;;MACA,KAAKG,OAAL;;MACA,IAAI,KAAKpE,SAAT,EAAoB;QAChB;QACA,KAAKc,OAAL,CAAa,sBAAb;MACH;;MACD,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;EAlXA;IAAA;IAAA,OAmXI,iBAAQ;MACJ,OAAO,KAAKtB,UAAL,EAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EA5XA;IAAA;IAAA,OA6XI,kBAASqC,SAAT,EAAmB;MACf,KAAKxB,KAAL,CAAWwB,QAAX,GAAsBA,SAAtB;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAvYA;IAAA;IAAA,KAwYI,eAAe;MACX,KAAKxB,KAAL,CAAWmC,QAAX,GAAsB,IAAtB;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EA1ZA;IAAA;IAAA,OA2ZI,iBAAQG,QAAR,EAAiB;MACb,KAAKtC,KAAL,CAAWsC,OAAX,GAAqBA,QAArB;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAraA;IAAA;IAAA,OAsaI,eAAM+B,QAAN,EAAgB;MACZ,KAAKH,aAAL,GAAqB,KAAKA,aAAL,IAAsB,EAA3C;;MACA,KAAKA,aAAL,CAAmB7B,IAAnB,CAAwBgC,QAAxB;;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAjbA;IAAA;IAAA,OAkbI,oBAAWA,QAAX,EAAqB;MACjB,KAAKH,aAAL,GAAqB,KAAKA,aAAL,IAAsB,EAA3C;;MACA,KAAKA,aAAL,CAAmBrD,OAAnB,CAA2BwD,QAA3B;;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;EA5bA;IAAA;IAAA,OA6bI,gBAAOA,QAAP,EAAiB;MACb,IAAI,CAAC,KAAKH,aAAV,EAAyB;QACrB,OAAO,IAAP;MACH;;MACD,IAAIG,QAAJ,EAAc;QACV,IAAMF,SAAS,GAAG,KAAKD,aAAvB;;QACA,KAAK,IAAIxB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyB,SAAS,CAAC1C,MAA9B,EAAsCiB,CAAC,EAAvC,EAA2C;UACvC,IAAI2B,QAAQ,KAAKF,SAAS,CAACzB,CAAD,CAA1B,EAA+B;YAC3ByB,SAAS,CAACxB,MAAV,CAAiBD,CAAjB,EAAoB,CAApB;YACA,OAAO,IAAP;UACH;QACJ;MACJ,CARD,MASK;QACD,KAAKwB,aAAL,GAAqB,EAArB;MACH;;MACD,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;EApdA;IAAA;IAAA,OAqdI,wBAAe;MACX,OAAO,KAAKA,aAAL,IAAsB,EAA7B;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAveA;IAAA;IAAA,OAweI,uBAAcG,QAAd,EAAwB;MACpB,KAAKM,qBAAL,GAA6B,KAAKA,qBAAL,IAA8B,EAA3D;;MACA,KAAKA,qBAAL,CAA2BtC,IAA3B,CAAgCgC,QAAhC;;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EA5fA;IAAA;IAAA,OA6fI,4BAAmBA,QAAnB,EAA6B;MACzB,KAAKM,qBAAL,GAA6B,KAAKA,qBAAL,IAA8B,EAA3D;;MACA,KAAKA,qBAAL,CAA2B9D,OAA3B,CAAmCwD,QAAnC;;MACA,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EArhBA;IAAA;IAAA,OAshBI,wBAAeA,QAAf,EAAyB;MACrB,IAAI,CAAC,KAAKM,qBAAV,EAAiC;QAC7B,OAAO,IAAP;MACH;;MACD,IAAIN,QAAJ,EAAc;QACV,IAAMF,SAAS,GAAG,KAAKQ,qBAAvB;;QACA,KAAK,IAAIjC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyB,SAAS,CAAC1C,MAA9B,EAAsCiB,CAAC,EAAvC,EAA2C;UACvC,IAAI2B,QAAQ,KAAKF,SAAS,CAACzB,CAAD,CAA1B,EAA+B;YAC3ByB,SAAS,CAACxB,MAAV,CAAiBD,CAAjB,EAAoB,CAApB;YACA,OAAO,IAAP;UACH;QACJ;MACJ,CARD,MASK;QACD,KAAKiC,qBAAL,GAA6B,EAA7B;MACH;;MACD,OAAO,IAAP;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;;EA7iBA;IAAA;IAAA,OA8iBI,gCAAuB;MACnB,OAAO,KAAKA,qBAAL,IAA8B,EAArC;IACH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;;EAvjBA;IAAA;IAAA,OAwjBI,iCAAwBxD,MAAxB,EAAgC;MAC5B,IAAI,KAAKwD,qBAAL,IAA8B,KAAKA,qBAAL,CAA2BlD,MAA7D,EAAqE;QACjE,IAAM0C,SAAS,GAAG,KAAKQ,qBAAL,CAA2BP,KAA3B,EAAlB;;QADiE,4CAE1CD,SAF0C;QAAA;;QAAA;UAEjE,uDAAkC;YAAA,IAAvBE,QAAuB;YAC9BA,QAAQ,CAACtD,KAAT,CAAe,IAAf,EAAqBI,MAAM,CAACG,IAA5B;UACH;QAJgE;UAAA;QAAA;UAAA;QAAA;MAKpE;IACJ;EA/jBL;;EAAA;AAAA,EAA4BzC,OAA5B"},"metadata":{},"sourceType":"module"}