[{"D:\\projects\\Sync_Code\\src\\index.js":"1","D:\\projects\\Sync_Code\\src\\App.js":"2","D:\\projects\\Sync_Code\\src\\Home.js":"3","D:\\projects\\Sync_Code\\src\\EditorPage.js":"4","D:\\projects\\Sync_Code\\src\\socket.js":"5","D:\\projects\\Sync_Code\\src\\components\\Client_avatar.js":"6","D:\\projects\\Sync_Code\\src\\components\\Editor.js":"7"},{"size":195,"mtime":1717673573119,"results":"8","hashOfConfig":"9"},{"size":768,"mtime":1717673573112,"results":"10","hashOfConfig":"9"},{"size":2477,"mtime":1717753647375,"results":"11","hashOfConfig":"9"},{"size":3316,"mtime":1717673573113,"results":"12","hashOfConfig":"9"},{"size":316,"mtime":1717673573119,"results":"13","hashOfConfig":"9"},{"size":370,"mtime":1717673573115,"results":"14","hashOfConfig":"9"},{"size":1722,"mtime":1717673573116,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1p56jx9",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"19"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"19"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"19"},"D:\\projects\\Sync_Code\\src\\index.js",[],[],[],"D:\\projects\\Sync_Code\\src\\App.js",["41"],[],"import React from \"react\";\r\nimport { BrowserRouter, Routes, Route } from 'react-router-dom'\r\nimport Home from './Home'\r\nimport './Home.css'\r\nimport Editor from \"./EditorPage\";\r\nimport { Toaster } from 'react-hot-toast';\r\nimport EditorPage from \"./EditorPage\";\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Toaster position='top-center' toastOptions={{\r\n          success: {\r\n            theme: {\r\n              primary: '#4aed88',\r\n            }\r\n          }\r\n        }} ></Toaster>\r\n      </div>\r\n      <BrowserRouter>\r\n        <Routes>\r\n          <Route exact path=\"/\" element={<Home />} />\r\n          <Route exact path=\"/editor/:id\" element={<EditorPage />} />\r\n        </Routes>\r\n      </BrowserRouter>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\projects\\Sync_Code\\src\\Home.js",[],[],"D:\\projects\\Sync_Code\\src\\EditorPage.js",["42"],[],"import React, { useEffect, useRef, useState } from 'react'\r\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\r\nimport toast from 'react-hot-toast';\r\nimport { initSocket } from './socket'\r\nimport Client from './components/Client_avatar'\r\nimport logo from \"./images/logo.webp\"\r\nimport Editor from './components/Editor';\r\nimport './EditorPage.css'\r\n\r\n\r\nfunction EditorPage() {\r\n    const socketRef = useRef(null)\r\n    const navigate = useNavigate();\r\n    const codeRef = useRef(null);\r\n    const location = useLocation();\r\n    const data = useParams();\r\n    const roomId = data.id\r\n    const username = location.state.username\r\n    const [clients, setclients] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        const init = async () =>{\r\n            socketRef.current = await initSocket();\r\n\r\n            socketRef.current.emit('join_room', { roomId, username })\r\n\r\n            socketRef.current.on(\"joined_user\", ({ clients, username, socketId }) => {\r\n            if (username !== location.state.username) {\r\n                toast.success(`${username} joined the room.`)\r\n            }\r\n            setclients(clients);\r\n\r\n            socketRef.current.emit('sync_code',{\r\n                code: codeRef.current,\r\n                socketId,\r\n            })\r\n        })\r\n\r\n        socketRef.current.on('disconnected', ({ socketId, username }) => {\r\n            toast.success(`${username} left the room`);\r\n            setclients((prev) => {\r\n                return prev.filter(\r\n                    (clients) => clients.socketId !== socketId\r\n                )\r\n            })\r\n        })\r\n        }\r\n        init();\r\n        return () => {\r\n            socketRef.current.disconnect();\r\n            socketRef.current.off(\"disconnected\")\r\n            socketRef.current.off(\"joined_user\")\r\n        }\r\n    }, [])\r\n\r\n\r\n    async function copyRoomId() {\r\n        console.log(clients)\r\n        try {\r\n            await window.navigator.clipboard.writeText(roomId);\r\n            toast.success('Room id has been copied to clipboard!')\r\n        } catch (err) {\r\n            toast.error(err);\r\n        }\r\n    }\r\n    function leaveRoom() {\r\n        navigate('/');\r\n        toast.success('You leaved the Room');\r\n    }\r\n\r\n    return (\r\n        <div className='mainWrap'>\r\n            <div className='aside'>\r\n                <div className='asideInner'>\r\n                    <div className=\"logo\">\r\n                        <img className=\"logoImage\" src={logo} alt=\"\" />\r\n                    </div>\r\n                    <h3>Connected</h3>\r\n                    <div className='clientList'> \r\n                        {\r\n                            clients.map((item) => (<Client key={item.socketId} username={item.username} />))\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className='buttons'>\r\n                    <button className='btn copyBtn' onClick={copyRoomId}>Copy Room Id</button>\r\n                    <button className='btn leaveBtn' onClick={leaveRoom}>Leave</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='editorWrap'>\r\n                <Editor socketRef={socketRef} roomId={roomId} onCodeChange={(code)=>{codeRef.current=code}}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditorPage\r\n","D:\\projects\\Sync_Code\\src\\socket.js",[],[],"D:\\projects\\Sync_Code\\src\\components\\Client_avatar.js",[],[],"D:\\projects\\Sync_Code\\src\\components\\Editor.js",["43","44"],[],"import React, { useEffect, useRef } from 'react'\r\nimport Codemirror from 'codemirror';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/dracula.css';\r\nimport 'codemirror/mode/javascript/javascript';\r\nimport 'codemirror/addon/edit/closetag';\r\nimport 'codemirror/addon/edit/closebrackets';\r\n\r\nconst Editor = ({socketRef,roomId, onCodeChange}) => {\r\n\r\n    const editorRef = useRef(null);\r\n\r\n    useEffect(()=>{\r\n        async function init(){\r\n            editorRef.current = Codemirror.fromTextArea(document.getElementById('realtimeEditor'),{\r\n                mode: {name: 'javascript' , json: true},\r\n                theme: 'dracula',\r\n                autoCloseBrackets: true,\r\n                autoCloseTags: true,\r\n                lineNumbers: true,\r\n            })\r\n\r\n            editorRef.current.on('change',(instance,changes)=>{\r\n                //console.log('changes',changes)\r\n                const {origin}= changes;\r\n                const code = instance.getValue();\r\n                onCodeChange(code)\r\n                if(origin!=='setValue'){\r\n                    socketRef.current.emit('codeChange',{\r\n                        roomId,\r\n                        code,\r\n                    })\r\n                } \r\n            });\r\n        }\r\n        init();\r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n        if(socketRef.current){\r\n            socketRef.current.on('codeChange',({code})=>{\r\n                console.log('receving',code)\r\n                if(code!==null){\r\n                    editorRef.current.setValue(code);\r\n                }\r\n            })\r\n        }\r\n    },[socketRef.current])\r\n\r\n    return (\r\n        <textarea id='realtimeEditor'></textarea>\r\n    )\r\n}\r\n\r\nexport default Editor\r\n",{"ruleId":"45","severity":1,"message":"46","line":5,"column":8,"nodeType":"47","messageId":"48","endLine":5,"endColumn":14},{"ruleId":"49","severity":1,"message":"50","line":55,"column":8,"nodeType":"51","endLine":55,"endColumn":10,"suggestions":"52"},{"ruleId":"49","severity":1,"message":"53","line":37,"column":7,"nodeType":"51","endLine":37,"endColumn":9,"suggestions":"54"},{"ruleId":"49","severity":1,"message":"55","line":48,"column":7,"nodeType":"51","endLine":48,"endColumn":26,"suggestions":"56"},"no-unused-vars","'Editor' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'location.state.username', 'roomId', and 'username'. Either include them or remove the dependency array.","ArrayExpression",["57"],"React Hook useEffect has missing dependencies: 'onCodeChange', 'roomId', and 'socketRef'. Either include them or remove the dependency array. If 'onCodeChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["58"],"React Hook useEffect has a missing dependency: 'socketRef'. Either include it or remove the dependency array. Mutable values like 'socketRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["59"],{"desc":"60","fix":"61"},{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},"Update the dependencies array to be: [location.state.username, roomId, username]",{"range":"66","text":"67"},"Update the dependencies array to be: [onCodeChange, roomId, socketRef]",{"range":"68","text":"69"},"Update the dependencies array to be: [socketRef]",{"range":"70","text":"71"},[1825,1827],"[location.state.username, roomId, username]",[1291,1293],"[onCodeChange, roomId, socketRef]",[1598,1617],"[socketRef]"]